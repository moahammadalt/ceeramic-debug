/**
 * ```sh
 * npm install @glazed/tile-loader
 * ```
 *
 * @module tile-loader
 */
import 'setimmediate';
import type { CeramicApi, CreateOpts, MultiQuery } from '@ceramicnetwork/common';
import { TileDocument } from '@ceramicnetwork/stream-tile';
import type { TileMetadataArgs } from '@ceramicnetwork/stream-tile';
import { CommitID, StreamID } from '@ceramicnetwork/streamid';
import DataLoader from 'dataloader';
/**
 * Omit `path` and `atTime` from [MultiQuery](https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.multiquery-1.html) as the cache needs to be deterministic based on the ID.
 */
export declare type TileQuery = Omit<MultiQuery, 'paths' | 'atTime'>;
export declare type TileKey = CommitID | StreamID | TileQuery | string;
export declare type TileCache = {
    /**
     * get a Promise of a TileDocument by its stream ID
     */
    get(id: string): Promise<TileDocument> | void;
    /**
     * set a Promise of a TileDocument by its stream ID
     */
    set(id: string, value: Promise<TileDocument>): any;
    /**
     * remove a specific entry from the cache
     */
    delete(id: string): any;
    /**
     * remove all entries from the cache
     */
    clear(): any;
};
export declare type TileLoaderParams = {
    /**
     * A Ceramic client instance
     */
    ceramic: CeramicApi;
    /**
     * A supported cache implementation, `true` to use the default implementation or `false` to disable the cache (default)
     */
    cache?: TileCache | boolean;
};
/** @internal */
export declare function keyToQuery(key: TileKey): TileQuery;
/** @internal */
export declare function keyToString(key: TileKey): string;
/**
 * Create a {@linkcode TileQuery} for a determinitic TileDocument based on its metadata.
 */
export declare function getDeterministicQuery(metadata: TileMetadataArgs): Promise<TileQuery>;
/**
 * A TileLoader extends [DataLoader](https://github.com/graphql/dataloader) to provide batching and caching functionalities for loading TileDocument streams.
 */
export declare class TileLoader extends DataLoader<TileKey, TileDocument> {
    #private;
    constructor(params: TileLoaderParams);
    /**
     * Add a TileDocument to the local cache if enabled.
     */
    cache(stream: TileDocument): boolean;
    /**
     * Create a new TileDocument and add it to the cache if enabled.
     */
    create<T extends Record<string, any> = Record<string, any>>(content: T, metadata?: TileMetadataArgs, options?: CreateOpts): Promise<TileDocument<T>>;
    /**
     * Create or load a deterministic TileDocument based on its metadata.
     */
    deterministic<T extends Record<string, any> = Record<string, any>>(metadata: TileMetadataArgs, options?: CreateOpts): Promise<TileDocument<T | null | undefined>>;
    /**
     * Load a TileDocument from the cache (if enabled) or remotely.
     */
    load<T extends Record<string, any> = Record<string, any>>(key: TileKey): Promise<TileDocument<T>>;
}
