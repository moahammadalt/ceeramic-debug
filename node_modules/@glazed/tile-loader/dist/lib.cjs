"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("setimmediate");var streamTile=require("@ceramicnetwork/stream-tile"),streamid=require("@ceramicnetwork/streamid"),DataLoader=require("dataloader");function _interopDefaultLegacy(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var DataLoader__default=_interopDefaultLegacy(DataLoader),__accessCheck=(e,t,r)=>{if(!t.has(e))throw TypeError("Cannot "+r)},__privateGet=(e,t,r)=>(__accessCheck(e,t,"read from private field"),r?r.call(e):t.get(e)),__privateAdd=(e,t,r)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,r)},__privateSet=(e,t,r,a)=>(__accessCheck(e,t,"write to private field"),a?a.call(e,r):t.set(e,r),r),_ceramic,_useCache;function keyToQuery(e){return typeof e=="string"||streamid.CommitID.isInstance(e)||streamid.StreamID.isInstance(e)?{streamId:e}:{streamId:e.streamId,genesis:e.genesis}}function keyToString(e){return typeof e=="string"?streamid.StreamRef.from(e).toString():streamid.CommitID.isInstance(e)||streamid.StreamID.isInstance(e)?e.toString():e.streamId.toString()}async function getDeterministicQuery(e){const t=await streamTile.TileDocument.makeGenesis({},null,{...e,deterministic:!0}),r=await streamid.StreamID.fromGenesis("tile",t);return{genesis:t,streamId:r}}class TileLoader extends DataLoader__default.default{constructor(t){super(async r=>{t.cache||this.clearAll();const a=await t.ceramic.multiQuery(r.map(keyToQuery));return r.map(i=>{const n=keyToString(i),c=a[n];return c||new Error(`Failed to load stream: ${n}`)})},{cache:!0,cacheKeyFn:keyToString,cacheMap:t.cache!=null&&typeof t.cache!="boolean"?t.cache:void 0});__privateAdd(this,_ceramic,void 0),__privateAdd(this,_useCache,void 0),__privateSet(this,_ceramic,t.ceramic),__privateSet(this,_useCache,!!t.cache)}cache(t){if(!__privateGet(this,_useCache))return!1;const r=t.id.toString();return this.clear(r).prime(r,t),!0}async create(t,r,a){const i=await streamTile.TileDocument.create(__privateGet(this,_ceramic),t,r,a);return this.cache(i),i}async deterministic(t,r){const a=await getDeterministicQuery(t);try{return await super.load(a)}catch{const n=await streamTile.TileDocument.createFromGenesis(__privateGet(this,_ceramic),a.genesis,r);return this.cache(n),n}}async load(t){return await super.load(t)}}_ceramic=new WeakMap,_useCache=new WeakMap,exports.TileLoader=TileLoader,exports.getDeterministicQuery=getDeterministicQuery,exports.keyToQuery=keyToQuery,exports.keyToString=keyToString;
//# sourceMappingURL=lib.cjs.map
