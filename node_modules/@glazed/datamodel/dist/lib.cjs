"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var tileLoader=require("@glazed/tile-loader"),__accessCheck=(i,e,t)=>{if(!e.has(i))throw TypeError("Cannot "+t)},__privateGet=(i,e,t)=>(__accessCheck(i,e,"read from private field"),t?t.call(i):e.get(i)),__privateAdd=(i,e,t)=>{if(e.has(i))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(i):e.set(i,t)},__privateSet=(i,e,t,r)=>(__accessCheck(i,e,"write to private field"),r?r.call(i,t):e.set(i,t),t),_autopin,_loader,_model;class DataModel{constructor(e){if(__privateAdd(this,_autopin,void 0),__privateAdd(this,_loader,void 0),__privateAdd(this,_model,void 0),__privateSet(this,_autopin,e.autopin!==!1),__privateSet(this,_model,e.model),e.loader!=null)__privateSet(this,_loader,e.loader);else{if(e.ceramic==null)throw new Error("Invalid DataModel parameters: missing ceramic or loader");__privateSet(this,_loader,new tileLoader.TileLoader({ceramic:e.ceramic,cache:e.cache}))}}get loader(){return __privateGet(this,_loader)}getDefinitionID(e){return __privateGet(this,_model).definitions[e]??null}getSchemaURL(e){return __privateGet(this,_model).schemas[e]??null}getTileID(e){return __privateGet(this,_model).tiles[e]??null}async loadTile(e){const t=this.getTileID(e);if(t==null)throw new Error(`Tile alias "${e}" is not defined`);return await __privateGet(this,_loader).load(t)}async createTile(e,t,{pin:r}={}){const a=this.getSchemaURL(e);if(a==null)throw new Error(`Schema alias "${e}" is not defined`);return await __privateGet(this,_loader).create(t,{schema:a},{pin:r??__privateGet(this,_autopin)})}}_autopin=new WeakMap,_loader=new WeakMap,_model=new WeakMap,exports.DataModel=DataModel;
//# sourceMappingURL=lib.cjs.map
