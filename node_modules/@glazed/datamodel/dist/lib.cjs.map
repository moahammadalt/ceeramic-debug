{"version":3,"file":"lib.cjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * ```sh\n * npm install @glazed/datamodel\n * ```\n *\n * @module datamodel\n */\n\nimport type { CeramicApi } from '@ceramicnetwork/common'\nimport type { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { TileLoader } from '@glazed/tile-loader'\nimport type { TileCache } from '@glazed/tile-loader'\nimport type { ModelTypeAliases, ModelTypesToAliases } from '@glazed/types'\n\nexport type CreateOptions = {\n  /**\n   * Pin the created stream (default)\n   */\n  pin?: boolean\n}\n\nexport type DataModelParams<Model> = {\n  /**\n   * Pin all created streams (default)\n   */\n  autopin?: boolean\n  /**\n   * {@linkcode TileLoader} cache parameter, only used if `loader` is not provided\n   */\n  cache?: TileCache | boolean\n  /**\n   * A Ceramic client instance, only used if `loader` is not provided\n   */\n  ceramic?: CeramicApi\n  /**\n   * A {@linkcode TileLoader} instance to use, must be provided if `ceramic` is not provided\n   */\n  loader?: TileLoader\n  /**\n   * The runtime model aliases to use\n   */\n  model: Model\n}\n\n/**\n * ```sh\n * import { DataModel } from '@glazed/datamodel'\n * ```\n */\nexport class DataModel<\n  ModelTypes extends ModelTypeAliases,\n  ModelAliases extends ModelTypesToAliases<ModelTypes> = ModelTypesToAliases<ModelTypes>\n> {\n  #autopin: boolean\n  #loader: TileLoader\n  #model: ModelAliases\n\n  constructor(params: DataModelParams<ModelAliases>) {\n    this.#autopin = params.autopin !== false\n    this.#model = params.model\n\n    if (params.loader != null) {\n      this.#loader = params.loader\n    } else if (params.ceramic == null) {\n      throw new Error('Invalid DataModel parameters: missing ceramic or loader')\n    } else {\n      this.#loader = new TileLoader({ ceramic: params.ceramic, cache: params.cache })\n    }\n  }\n\n  get loader(): TileLoader {\n    return this.#loader\n  }\n\n  getDefinitionID<Alias extends keyof ModelAliases['definitions']>(alias: Alias): string | null {\n    return this.#model.definitions[alias] ?? null\n  }\n\n  getSchemaURL<Alias extends keyof ModelAliases['schemas']>(alias: Alias): string | null {\n    return this.#model.schemas[alias] ?? null\n  }\n\n  getTileID<Alias extends keyof ModelAliases['tiles']>(alias: Alias): string | null {\n    return this.#model.tiles[alias] ?? null\n  }\n\n  /**\n   * Load the TileDocument identified by the given `alias`.\n   */\n  async loadTile<\n    Alias extends keyof ModelAliases['tiles'],\n    ContentType = ModelTypes['schemas'][ModelTypes['tiles'][Alias]]\n  >(alias: Alias): Promise<TileDocument<ContentType> | null> {\n    const id = this.getTileID(alias)\n    if (id == null) {\n      throw new Error(`Tile alias \"${alias as string}\" is not defined`)\n    }\n    return await this.#loader.load<ContentType>(id)\n  }\n\n  /**\n   * Create a TileDocument using a schema identified by the given `schemaAlias`.\n   */\n  async createTile<\n    Alias extends keyof ModelAliases['schemas'],\n    ContentType = ModelTypes['schemas'][Alias]\n  >(\n    schemaAlias: Alias,\n    content: ContentType,\n    { pin }: CreateOptions = {}\n  ): Promise<TileDocument<ContentType>> {\n    const schema = this.getSchemaURL(schemaAlias)\n    if (schema == null) {\n      throw new Error(`Schema alias \"${schemaAlias as string}\" is not defined`)\n    }\n\n    return await this.#loader.create<ContentType>(\n      content,\n      { schema },\n      { pin: pin ?? this.#autopin }\n    )\n  }\n}\n"],"names":["TileLoader"],"mappings":"yiBAoDE,CAKA,YAAY,EAAuC,4HAC5C,SAAW,EAAO,UAAY,sBAC9B,OAAS,EAAO,OAEjB,EAAO,QAAU,uBACd,QAAU,EAAO,gBACb,EAAO,SAAW,UACrB,IAAI,OAAM,6EAEX,QAAU,GAAIA,uBAAW,CAAE,QAAS,EAAO,QAAS,MAAO,EAAO,aAIvE,SAAqB,OAChB,mBAAK,SAGd,gBAAiE,EAA6B,OACrF,mBAAK,QAAO,YAAY,IAAU,KAG3C,aAA0D,EAA6B,OAC9E,mBAAK,QAAO,QAAQ,IAAU,KAGvC,UAAqD,EAA6B,OACzE,mBAAK,QAAO,MAAM,IAAU,UAM/B,UAGJ,EAAyD,MACnD,GAAK,KAAK,UAAU,MACtB,GAAM,UACF,IAAI,OAAM,eAAe,2BAE1B,MAAM,mBAAK,SAAQ,KAAkB,QAMxC,YAIJ,EACA,EACA,CAAE,OAAuB,GACW,MAC9B,GAAS,KAAK,aAAa,MAC7B,GAAU,UACN,IAAI,OAAM,iBAAiB,2BAG5B,MAAM,mBAAK,SAAQ,OACxB,EACA,CAAE,UACF,CAAE,IAAK,GAAO,kBAAK,aAlEvB,qBACA,oBACA"}