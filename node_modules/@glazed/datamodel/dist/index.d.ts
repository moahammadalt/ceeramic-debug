/**
 * ```sh
 * npm install @glazed/datamodel
 * ```
 *
 * @module datamodel
 */
import type { CeramicApi } from '@ceramicnetwork/common';
import type { TileDocument } from '@ceramicnetwork/stream-tile';
import { TileLoader } from '@glazed/tile-loader';
import type { TileCache } from '@glazed/tile-loader';
import type { ModelTypeAliases, ModelTypesToAliases } from '@glazed/types';
export declare type CreateOptions = {
    /**
     * Pin the created stream (default)
     */
    pin?: boolean;
};
export declare type DataModelParams<Model> = {
    /**
     * Pin all created streams (default)
     */
    autopin?: boolean;
    /**
     * {@linkcode TileLoader} cache parameter, only used if `loader` is not provided
     */
    cache?: TileCache | boolean;
    /**
     * A Ceramic client instance, only used if `loader` is not provided
     */
    ceramic?: CeramicApi;
    /**
     * A {@linkcode TileLoader} instance to use, must be provided if `ceramic` is not provided
     */
    loader?: TileLoader;
    /**
     * The runtime model aliases to use
     */
    model: Model;
};
/**
 * ```sh
 * import { DataModel } from '@glazed/datamodel'
 * ```
 */
export declare class DataModel<ModelTypes extends ModelTypeAliases, ModelAliases extends ModelTypesToAliases<ModelTypes> = ModelTypesToAliases<ModelTypes>> {
    #private;
    constructor(params: DataModelParams<ModelAliases>);
    get loader(): TileLoader;
    getDefinitionID<Alias extends keyof ModelAliases['definitions']>(alias: Alias): string | null;
    getSchemaURL<Alias extends keyof ModelAliases['schemas']>(alias: Alias): string | null;
    getTileID<Alias extends keyof ModelAliases['tiles']>(alias: Alias): string | null;
    /**
     * Load the TileDocument identified by the given `alias`.
     */
    loadTile<Alias extends keyof ModelAliases['tiles'], ContentType = ModelTypes['schemas'][ModelTypes['tiles'][Alias]]>(alias: Alias): Promise<TileDocument<ContentType> | null>;
    /**
     * Create a TileDocument using a schema identified by the given `schemaAlias`.
     */
    createTile<Alias extends keyof ModelAliases['schemas'], ContentType = ModelTypes['schemas'][Alias]>(schemaAlias: Alias, content: ContentType, { pin }?: CreateOptions): Promise<TileDocument<ContentType>>;
}
