import{TileLoader as f}from"@glazed/tile-loader";var h=(i,e,t)=>{if(!e.has(i))throw TypeError("Cannot "+t)},r=(i,e,t)=>(h(i,e,"read from private field"),t?t.call(i):e.get(i)),d=(i,e,t)=>{if(e.has(i))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(i):e.set(i,t)},o=(i,e,t,l)=>(h(i,e,"write to private field"),l?l.call(i,t):e.set(i,t),t),s,a,n;class u{constructor(e){if(d(this,s,void 0),d(this,a,void 0),d(this,n,void 0),o(this,s,e.autopin!==!1),o(this,n,e.model),e.loader!=null)o(this,a,e.loader);else{if(e.ceramic==null)throw new Error("Invalid DataModel parameters: missing ceramic or loader");o(this,a,new f({ceramic:e.ceramic,cache:e.cache}))}}get loader(){return r(this,a)}getDefinitionID(e){return r(this,n).definitions[e]??null}getSchemaURL(e){return r(this,n).schemas[e]??null}getTileID(e){return r(this,n).tiles[e]??null}async loadTile(e){const t=this.getTileID(e);if(t==null)throw new Error(`Tile alias "${e}" is not defined`);return await r(this,a).load(t)}async createTile(e,t,{pin:l}={}){const c=this.getSchemaURL(e);if(c==null)throw new Error(`Schema alias "${e}" is not defined`);return await r(this,a).create(t,{schema:c},{pin:l??r(this,s)})}}s=new WeakMap,a=new WeakMap,n=new WeakMap;export{u as DataModel};
//# sourceMappingURL=lib.mjs.map
