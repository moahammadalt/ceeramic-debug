"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var streamid=require("@ceramicnetwork/streamid"),constants=require("@glazed/constants"),datamodel=require("@glazed/datamodel"),tileLoader=require("@glazed/tile-loader"),__accessCheck$1=(n,t,e)=>{if(!t.has(n))throw TypeError("Cannot "+e)},__privateGet$1=(n,t,e)=>(__accessCheck$1(n,t,"read from private field"),e?e.call(n):t.get(n)),__privateAdd$1=(n,t,e)=>{if(t.has(n))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(n):t.set(n,e)},__privateSet$1=(n,t,e,i)=>(__accessCheck$1(n,t,"write to private field"),i?i.call(n,e):t.set(n,e),e),_getRemote,_queue,_promiseValue,_deferValue;class TileProxy{constructor(t){__privateAdd$1(this,_getRemote,void 0),__privateAdd$1(this,_queue,[]),__privateAdd$1(this,_promiseValue,void 0),__privateAdd$1(this,_deferValue,void 0),__privateSet$1(this,_getRemote,t),this._createValuePromise()}_createValuePromise(){__privateSet$1(this,_promiseValue,new Promise((t,e)=>{__privateSet$1(this,_deferValue,{resolve:t,reject:e})}))}change(t){return new Promise((e,i)=>{const r=async a=>{try{const s=await t(a);e(),this._next(s)}catch(s){i(s),this._next(a)}};__privateGet$1(this,_queue).push({reject:i,run:r}),__privateGet$1(this,_queue).length===1&&this._start()})}async changeContent(t){const e=async i=>(await i.update(t(i.content),i.metadata),i);return await this.change(e)}async get(){return __privateGet$1(this,_queue).length===0?await __privateGet$1(this,_getRemote).call(this):await __privateGet$1(this,_promiseValue)}async _start(){try{const t=await __privateGet$1(this,_getRemote).call(this);this._next(t)}catch(t){__privateGet$1(this,_queue).forEach(e=>{e.reject(t)}),__privateSet$1(this,_queue,[]),__privateGet$1(this,_deferValue).reject(t),this._createValuePromise()}}_next(t){const e=__privateGet$1(this,_queue).shift();e==null?this._end(t):e.run(t)}_end(t){__privateGet$1(this,_deferValue).resolve(t),this._createValuePromise()}}_getRemote=new WeakMap,_queue=new WeakMap,_promiseValue=new WeakMap,_deferValue=new WeakMap;const didRegex=/^did:([A-Za-z0-9]+):([A-Za-z0-9.\-:_]+)$/;function isDIDstring(n){return didRegex.test(n)}function assertDIDstring(n){if(!isDIDstring(n))throw new Error(`Invalid DID: ${n}`)}function getIDXMetadata(n){return assertDIDstring(n),{controllers:[n],family:"IDX"}}var __accessCheck=(n,t,e)=>{if(!t.has(n))throw TypeError("Cannot "+e)},__privateGet=(n,t,e)=>(__accessCheck(n,t,"read from private field"),e?e.call(n):t.get(n)),__privateAdd=(n,t,e)=>{if(t.has(n))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(n):t.set(n,e)},__privateSet=(n,t,e,i)=>(__accessCheck(n,t,"write to private field"),i?i.call(n,e):t.set(n,e),e),_autopin,_ceramic,_id,_indexProxies,_loader,_model;class DIDDataStore{constructor(t){__privateAdd(this,_autopin,void 0),__privateAdd(this,_ceramic,void 0),__privateAdd(this,_id,void 0),__privateAdd(this,_indexProxies,{}),__privateAdd(this,_loader,void 0),__privateAdd(this,_model,void 0);const{autopin:e,cache:i,ceramic:r,id:a,loader:s,model:c}=t;__privateSet(this,_autopin,e!==!1),__privateSet(this,_ceramic,r),__privateSet(this,_id,a),__privateSet(this,_loader,s??new tileLoader.TileLoader({ceramic:r,cache:i})),__privateSet(this,_model,c instanceof datamodel.DataModel?c:new datamodel.DataModel({autopin:e,loader:__privateGet(this,_loader),model:c}))}get authenticated(){return __privateGet(this,_ceramic).did!=null}get ceramic(){return __privateGet(this,_ceramic)}get id(){if(__privateGet(this,_id)!=null)return __privateGet(this,_id);if(__privateGet(this,_ceramic).did==null)throw new Error("Ceramic instance is not authenticated");return __privateGet(this,_ceramic).did.id}get loader(){return __privateGet(this,_loader)}get model(){return __privateGet(this,_model)}async has(t,e){const i=this.getDefinitionID(t);return await this.getRecordID(i,e)!=null}async get(t,e){const i=this.getDefinitionID(t);return await this.getRecord(i,e)}async getMultiple(t,e){const i=this.getDefinitionID(t),r=await Promise.all(e.map(async c=>{const{genesis:o,streamId:d}=await tileLoader.getDeterministicQuery(getIDXMetadata(c));return{genesis:o,streamId:d.toString(),paths:[i]}})),a=await __privateGet(this,_ceramic).multiQuery(r),s=[];for(const c of r){const o=a[c.streamId]?.content?.[i],d=o?a[streamid.StreamID.fromString(o).toString()]:null;s.push(d?.content??null)}return s}async set(t,e,i={}){const r=this.getDefinitionID(t),[a,s]=await this._setRecordOnly(r,e,i);return a&&await this._setReference(i.controller??this.id,r,s),s}async merge(t,e,i={}){const r=this.getDefinitionID(t),a=await this.getRecord(r),s=a?{...a,...e}:e;return await this.setRecord(r,s,i)}async setAll(t,e={}){const i=Object.entries(t).map(async([s,c])=>{const o=this.getDefinitionID(s),[d,h]=await this._setRecordOnly(o,c,e);return[d,o,h]}),a=(await Promise.all(i)).reduce((s,[c,o,d])=>(c&&(s[o]=d.toUrl()),s),{});return await this._setReferences(e.controller??this.id,a),a}async setDefaults(t,e={}){const i=await this.getIndex()??{},r=Object.entries(t).map(([c,o])=>[this.getDefinitionID(c),o]).filter(c=>i[c[0]]==null).map(async([c,o])=>{const d=await this.getDefinition(c),h=await this._createRecord(d,o,e);return{[c]:h.toUrl()}}),s=(await Promise.all(r)).reduce((c,o)=>Object.assign(c,o),{});return await this._setReferences(e.controller??this.id,s),s}async remove(t,e=this.id){await this._getIndexProxy(e).changeContent(i=>(i!=null&&delete i[this.getDefinitionID(t)],i))}async getIndex(t=this.id){const e=this.authenticated&&t===this.id?await this._getIndexProxy(t).get():await this._getIDXDoc(t);return e?e.content:null}iterator(t){let e,i=0;return{[Symbol.asyncIterator](){return this},next:async()=>{if(e==null){const c=await this.getIndex(t);e=Object.entries(c??{})}if(i===e.length)return{done:!0,value:null};const[r,a]=e[i++],s=await __privateGet(this,_loader).load(a);return{done:!1,value:{key:r,id:a,record:s.content}}}}}async _createIDXDoc(t){return await __privateGet(this,_loader).deterministic(getIDXMetadata(t))}async _getIDXDoc(t){const e=await this._createIDXDoc(t);if(e.content==null||e.metadata.schema==null)return null;if(e.metadata.schema!==constants.CIP11_INDEX_SCHEMA_URL)throw new Error("Invalid document: schema is not IdentityIndex");return e}async _getOwnIDXDoc(t){const e=await this._createIDXDoc(t);if(e.content==null||e.metadata.schema==null)await e.update({},{schema:constants.CIP11_INDEX_SCHEMA_URL},{pin:__privateGet(this,_autopin)});else if(e.metadata.schema!==constants.CIP11_INDEX_SCHEMA_URL)throw new Error("Invalid document: schema is not IdentityIndex");return e}_getIndexProxy(t){let e=__privateGet(this,_indexProxies)[t];return e==null&&(e=new TileProxy(async()=>await this._getOwnIDXDoc(t)),__privateGet(this,_indexProxies)[t]=e),e}getDefinitionID(t){return __privateGet(this,_model).getDefinitionID(t)??t}async getDefinition(t){const e=await __privateGet(this,_loader).load(t);if(e.metadata.schema!==constants.CIP11_DEFINITION_SCHEMA_URL)throw new Error("Invalid document: schema is not Definition");return{...e.content,id:e.id}}async getRecordID(t,e){return(await this.getIndex(e??this.id))?.[t]??null}async getRecordDocument(t,e){const i=await this.getRecordID(t,e);return i?await __privateGet(this,_loader).load(i):null}async getRecord(t,e){const i=await this.getRecordDocument(t,e);return i?i.content:null}async setRecord(t,e,i={}){const[r,a]=await this._setRecordOnly(t,e,i);return r&&await this._setReference(i.controller??this.id,t,a),a}async _setRecordOnly(t,e,i){const r=await this.getRecordID(t,i.controller??this.id);if(r==null){const a=await this.getDefinition(t),s=await this._createRecord(a,e,i);return[!0,s]}else{const a=await __privateGet(this,_loader).load(r);return await a.update(e),[!1,a.id]}}async _createRecord(t,e,{controller:i,pin:r}){const a=await __privateGet(this,_loader).deterministic({controllers:[i??this.id],family:t.id.toString()});return await a.update(e,{schema:t.schema},{pin:r??__privateGet(this,_autopin)}),a.id}async _setReference(t,e,i){await this._getIndexProxy(t).changeContent(r=>({...r,[e]:i.toUrl()}))}async _setReferences(t,e){Object.keys(e).length!==0&&await this._getIndexProxy(t).changeContent(i=>({...i,...e}))}}_autopin=new WeakMap,_ceramic=new WeakMap,_id=new WeakMap,_indexProxies=new WeakMap,_loader=new WeakMap,_model=new WeakMap,exports.DIDDataStore=DIDDataStore,exports.assertDIDstring=assertDIDstring,exports.isDIDstring=isDIDstring;
//# sourceMappingURL=lib.cjs.map
