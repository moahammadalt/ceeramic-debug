import type { EncodedDagJWS, EncodedDagJWSResult, ManagedEntry, ManagedModel } from '@glazed/types';
import type { DagJWS, DagJWSResult } from 'dids';
export declare function decodeDagJWS({ payload, signatures, link }: EncodedDagJWS): DagJWS;
export declare function encodeDagJWS({ payload, signatures, link }: DagJWS): EncodedDagJWS;
export declare function decodeDagJWSResult({ jws, linkedBlock }: EncodedDagJWSResult): DagJWSResult;
export declare function encodeDagJWSResult({ jws, linkedBlock }: DagJWSResult): EncodedDagJWSResult;
/** @internal */
export declare function decodeSignedMap<K extends string>(data: Record<K, Array<EncodedDagJWSResult>>): Record<K, Array<DagJWSResult>>;
/** @internal */
export declare function encodeSignedMap<K extends string>(data: Record<K, Array<DagJWSResult>>): Record<K, Array<EncodedDagJWSResult>>;
/** @internal */
export declare function decodeEntryCommits(entry: ManagedEntry<EncodedDagJWSResult>): ManagedEntry<DagJWSResult>;
export declare function decodeModel(model: ManagedModel<EncodedDagJWSResult>): ManagedModel<DagJWSResult>;
/** @internal */
export declare function encodeEntryCommits(entry: ManagedEntry<DagJWSResult>): ManagedEntry<EncodedDagJWSResult>;
export declare function encodeModel(model: ManagedModel<DagJWSResult>): ManagedModel<EncodedDagJWSResult>;
